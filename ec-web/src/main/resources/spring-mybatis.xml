<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<context:property-placeholder location="classpath:ecweb.properties" />

	<!-- Database Pool Configuration -->
	<bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init"
		  destroy-method="close" abstract="true">
		<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
		<property name="poolSize" value="1" />
		<!-- 连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="100"/>
		<!-- 连接池中保留的最大连接数 -->
		<property name="maxPoolSize" value="200"/>
		<!--连接最大存活时间，超过这个且没有正在使用的连接将自动销毁,0无限制，1000 =1000s,对于一些会自动中断连接的数据库如MySQL，可以设置这个参数，在达到这个时间的时候会自动关闭连接，下次数据库调用的时候就会新建-->
		<property name="maxLifetime" value="28800" />
		<!--获取连接失败重新获等待最大时间，在这个时间内如果有可用连接，将返回-->
		<property name="borrowConnectionTimeout" value="60"/>
		<!--最大获取数据时间，如果不设置这个值，Atomikos使用默认的5分钟，那么在处理大批量数据读取的时候，一旦超过5分钟，就会抛出类似 Resultset is close 的错误.-->
		<property name="reapTimeout" value="60"/>
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃 -->
		<property name="maxIdleTime" value="60"/>
		<!--连接回收时间, 连接池回收处理定时器，会根据maintenanceinterval设置的重复时间进行重复执行-->
		<property name="maintenanceInterval" value="60"/>
		<!--数据库连接池，最大可等待获取datasouce的时间-->
		<property name="loginTimeout" value="60"/>
		<property name="testQuery">
			<value>select 1</value>
		</property>
	</bean>

	<!-- EC db-->
	<bean id="dataSource" parent="abstractXADataSource">
		<!-- value只要两个数据源不同就行 -->
		<property name="uniqueResourceName" value="resEC" />
		<property name="xaDataSourceClassName"
				  value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="url">${jdbc.dbUrl}</prop>
				<prop key="user">${jdbc.username}</prop>
				<prop key="password">${jdbc.password}</prop>
				<prop key="pinGlobalTxToPhysicalConnection">true</prop>
			</props>
		</property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.prcsteel.ec.persist.dao.ec"/>
		<property name="sqlSessionFactoryBeanName" value="cneterSqlSessionFactory"/>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" name="cneterSqlSessionFactory">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="${typeAliasesPackage}" />
		<property name="mapperLocations" value="${mapperLocations}" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<bean id="transactionManagerEc" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!--EC db end-->

	<!-- CAS db-->
	<bean id="dataSourceEx" parent="abstractXADataSource">
		<!-- value只要两个数据源不同就行 -->
		<property name="uniqueResourceName" value="resCAS" />
		<property name="xaDataSourceClassName"
				  value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="url">${cas.jdbc.dbUrl}</prop>
				<prop key="user">${cas.jdbc.username}</prop>
				<prop key="password">${cas.jdbc.password}</prop>
				<prop key="pinGlobalTxToPhysicalConnection">true</prop>
			</props>
		</property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.prcsteel.ec.persist.dao.cas"/>
		<property name="sqlSessionFactoryBeanName" value="exSqlSessionFactory"/>
	</bean>
	<bean id="sqlSessionFactoryEx" class="org.mybatis.spring.SqlSessionFactoryBean" name="exSqlSessionFactory">
		<property name="dataSource" ref="dataSourceEx" />
		<property name="typeAliasesPackage" value="${cas.typeAliasesPackage}" />
		<property name="mapperLocations" value="${cas.mapperLocations}" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<!--CAS db end-->

	<!-- Atomikos Transaction Manager Configuration -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
		<property name="forceShutdown" value="true"/>
	</bean>
	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300"/>
	</bean>
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager"/>
		<property name="userTransaction" ref="atomikosUserTransaction"/>
		<property name="allowCustomIsolationLevels" value="true"/>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>
</beans>